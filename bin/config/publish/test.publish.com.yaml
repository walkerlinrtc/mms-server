type: publish
name: test.publish.com
key_file: test.publish.com.key
cert_file: test.publish.com.crt
apps:
  - name: app #接入点名称
    record:
      enabled: false
      types:
        # - ts
        # - m4s
        # - flv
    test_push_to_count: 200
    edge_push:
      - enabled: false
        protocol: rtmp
        url: rtmp://test2.publish.com/${app}/${stream_name}
    #   - protocol: rtmp
    #     url: rtmp://srs.com:1937/${app}/${stream_name}_b?sign=${params[sign]}
    #     params:
    #       time: get_time()
    #       sign: md5_upper(sys@test.publish.com/${domain}/${app}/${stream}/${params[time]})
    # origin_pull:
    #   enabled: true
    #   protocol: http-flv
    #   url: https://test.play.com:1443/${app}/${stream_name}.flv
    publish_auth_check: #限时鉴权sk(expiry_sk)
      enabled: false
      params:
        SignStr: string(/${app}/${stream_name}/?e=${url_params[e]})
        SecretKey: string(312ae9gd2BrCfpTdF4U8aIg9Puh62K4eEGY72Ea_)
        AccessKey: string(7O7hf7Ld1RrC_fpZdFvU8aCgOPuhw2K4eapYOdII)
        HMAC: hmac_sha1(${params[SecretKey]},${params[SignStr]})
        HMAC_Hex: bin_to_hex(${params[HMAC]})
        Base64: base64(${params[HMAC_Hex]})
        Token: string(${params[AccessKey]}:${params[Base64]})
        time: get_time()
      checks:
        - "${url_params[token]} == ${params[Token]}"
        - "${url_params[e]} > ${params[time]}"
    # http_callbacks:             # 回调配置
    #   on_publish:
    #       - async: false
    #         url: http://mms.com:8082/api/on_publish?sign=${params[sign]}&expire=${params[time]}
    #         params:
    #           key: string(123)
    #           t1: get_time()
    #           time: add(${params[t1]}, 10)
    #           sign: md5_upper(${domain}/${stream}/${app})
    #         headers:
    #           Host: mms.com
    #           Content-Type: application/json
    #         body: |
    #           {
    #             "event": "on_publish",
    #             "domain": "${domain}",
    #             "app": "${app}"
    #             "stream_name": "${stream_name}",
    #             "create_at": "${params[t1]}"
    #             "expire_at": ${params[time]}
    #           }
    hls: # 切片配置
      ts_min_seg_dur: 2000 # 2000ms，默认2000ms，单位ms
      ts_max_seg_dur: 6000 # 6000ms就必须切片，默认6000ms，单位ms
      ts_max_bytes: 2m # 最大2m，默认2M，单位支持k/m
      min_ts_count_for_m3u8: 3 #3个就可以输出m3u8，默认3
    bridge: #转协议配置
      no_players_timeout_ms: 10s #多少时间无人播放，转协议结束
      rtmp:
        to_flv: on #使能rtmp转flv
        to_hls: on #使能rtmp转hls
        to_rtsp: on #使能rtmp转rtsp
        to_webrtc: on #使能rtmp转webrtc
      flv:
        to_rtmp: on #使能flv转rtmp
        to_hls: on #使能flv转hls
        to_rtsp: on #使能flv转rtsp
        to_webrtc: on #使能flv转webrtc
      rtsp:
        to_rtmp: on #使能rtsp转rtmp
        to_flv: on #使能rtsp转flv
        to_hls: on #使能rtsp转hls
        to_webrtc: on #使能rtsp转webrtc
      webrtc:
        to_rtmp: on #使能webrtc转rtmp
        to_flv: on #使能webrtc转flv
        to_hls: on #使能webrtc转hls
        to_rtsp: on #使能webrtc转rtsp


    # origin_pull:
    #   protocol: rtmp
    #   url: rtmp://test.publish.com:1936/{app}/{stream}?time={params[time]}&sign={params[sign]}
    #   params:
    #     time: get_time()
    #     sign: md5_upper(sys@test.publish.com/{domain}/{app}/{stream}/{params[time]})
    # origin_pull:
    #   protocol: http-flv
    #   url: http://test.play.com:180/{app}/{stream}.flv
    # publish_auth_check: #限时鉴权(expiry)
    #   params:
    #     key: string(sys@test.publish.com)
    #     time: get_time()
    #     token: md5_upper(params[key]/{stream}/{url_params[expire]})
    #   checks:
    #     - ==({url_params[token]},params[token])
    #     - <({url_params[expire]},params[time])
    # publish_auth_check: #限时鉴权sk(expiry_sk)
    #   params:
    #     SignStr: string(/{app}/{stream}/?e={url_params[e]})
    #     SecretKey: string(312ae9gd2BrCfpTdF4U8aIg9Puh62K4eEGY72Ea_)
    #     AccessKey: string(7O7hf7Ld1RrC_fpZdFvU8aCgOPuhw2K4eapYOdII)
    #     HMAC: hmac_sha1({params[SignStr]},{params[SecretKey]})
    #     Base64: base64({params[HMAC]})
    #     Token: string({params[AccessKey]}:{params[Base64]})
    #     time: get_time()
    #   checks:
    #     - {url_params[token]} == params[Token]}
    #     - <({url_params[e]},params[time])
